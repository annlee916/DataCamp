Basic Plots with matplotlib

#Q1 Line Plot(1)

# Print the last item from year and pop


print(year[-1])

print(pop[-1])




# Import matplotlib.pyplot as plt


import matplotlib.pyplot as plt




# Make a line plot: year on the x-axis, pop on the y-axis


plt.plot(year, pop)

plt.show()



#Q2 Line Plot (2): Interpretation
check   pop[year.index(2041)], pop[year.index(2062)], pop[year.index(2083)], ...


#Q3 Line plot(3)

# Print the last item of gdp_cap and life_exp
print(gdp_cap[-1])

print(life_exp[-1])




# Make a line plot, gdp_cap on the x-axis, life_exp on the y-axis

plt.plot(gdp_cap, life_exp)



# Display the plot

plt.show()


#Q4 Scatter Plot (1)
# Change the line plot below to a scatter plot

plt.scatter(gdp_cap, life_exp)



# Put the x-axis on a logarithmic scale

plt.xscale('log')



# Show plot

plt.show()



#Q5 Scatter plot(2)

# Import package

import matplotlib.pyplot as plt



# Build Scatter plot

plt.scatter(pop, life_exp)



# Show plot

plt.show()


========================================================
Histograms.

#Q1. Build a histogram(1)
# Create histogram of life_exp data

plt.hist(life_exp)



# Display histogram

plt.show()

#Q2. Build a histogram (2): bins
# Build histogram with 5 bins

plt.hist(life_exp, bins=5)



# Show and clean up plot

plt.show()

plt.clf()



# Build histogram with 20 bins

plt.hist(life_exp, bins=20)



# Show and clean up again

plt.show()

plt.clf()


#Q3. Build a histogram (3): compare
# Histogram of life_exp, 15 bins
plt.hist(life_exp, bins=15)



# Show and clear plot

plt.show()

plt.clf()



# Histogram of life_exp1950, 15 bins

plt.hist(life_exp1950, bins=15) 



# Show and clear plot again

plt.show()

plt.clf()

#Q4  Choose the right plot (1)
You're a professor teaching Data Science with Python, and you want to visually assess if the grades on your exam follow a normal distribution. Which plot do you use?
Histogram

#Q5 Choose the right plot (2)
You're a professor in Data Analytics with Python, and you want to visually assess if longer answers on exam questions lead to higher grades. Which plot do you use?
Scatter


#==================================================
#customization

# Basic scatter plot, log scale

plt.scatter(gdp_cap, life_exp)

plt.xscale('log') 



# Strings
xlab = 'GDP per Capita [in USD]'

ylab = 'Life Expectancy [in years]'

title = 'World Development in 2007'



# Add axis labels

plt.xlabel(xlab)

plt.ylabel(ylab)




# Add title

plt.title(title)



# After customizing, display the plot

plt.show()


#Q2. Ticks
# Scatter plot

plt.scatter(gdp_cap, life_exp)
# Previous customizations

plt.xscale('log') 

plt.xlabel('GDP per Capita [in USD]')

plt.ylabel('Life Expectancy [in years]')

plt.title('World Development in 2007')



# Definition of tick_val and tick_lab

tick_val = [1000,10000,100000]

tick_lab = ['1k','10k','100k']



# Adapt the ticks on the x-axis

plt.xticks(tick_val, tick_lab)



# After customizing, display the plot

plt.show()



#Q3 Sizes
# Import numpy as np

import numpy as np



# Store pop as a numpy array: np_pop

np_pop = np.array(pop)



# Double np_pop

np_pop=np_pop*2




# Update: set s argument to np_pop

plt.scatter(gdp_cap, life_exp, s = np_pop)



# Previous customizations

plt.xscale('log') 

plt.xlabel('GDP per Capita [in USD]')

plt.ylabel('Life Expectancy [in years]')

plt.title('World Development in 2007')

plt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])



# Display the plot
plt.show()


#Q4. Colors
# Specify c and alpha inside plt.scatter()
plt.scatter(x = gdp_cap, y = life_exp, s = np.array(pop) * 2, c=col, alpha=0.8)



#Q5 Additional Customizations
# Add grid() call

plt.grid(True)


#Q6 Interpretation
The countries in blue, corresponding to Africa, have both low life expectancy and a low GDP per capita